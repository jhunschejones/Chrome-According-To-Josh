#!/usr/bin/env ruby

# ./tmp/parse-jpdb-reviews explanation
#
# Required state:
# `./tmp/reviews.json`: the exported reviews JSON from your jpdb.io account
#
# Output state:
# `./leeches.json`: leech cards for use with the jpdb-leeches chrome extension

require "json"
require "fileutils"
require "pry"

REVIEWS_RELATIVE_PATH = "./tmp/reviews.json"
WORD_LEECHES_RELATIVE_PATH = "./tmp/word_leeches.json"
KANJI_LEECHES_RELATIVE_PATH = "./tmp/kanji_leeches.json"
FAILED_GRADES = ["something", "nothing", "unknown"]
LAPSE_COUNT_THRESHOLD = 10 # number of times a card went from "known" to "forgotten" after it was first learned

# Returns number of times a card went from "known" to "forgotten" after it was
# first learned.
#
# https://docs.ankiweb.net/deck-options.html#lapses
def count_lapses(reviews)
  # We only want to count reviews after the first time the card was "learned"
  # so begin by removing the failed reviews while the card was still in the
  # learning phase.
  reviews.each do |review|
    if FAILED_GRADES.include?(review["grade"])
      reviews.shift
    else
      break
    end
  end

  # Lapses are counted when a card goes from "learned" to "forgotten", so only
  # count failed reviews after a card was "known", not multiple failed reviews
  # in a row.
  lapses = 0
  forgotten = false
  reviews.each do |review|
    # Track "forgotten" so we don't count multiple failures in a row
    if FAILED_GRADES.include?(review["grade"]) && !forgotten
      forgotten = true
      lapses +=1
    end

    # Reset "forgotten" when card is passed
    if !FAILED_GRADES.include?(review["grade"]) && forgotten
      forgotten = false
    end
  end

  lapses
end

reviews_file_path = File.expand_path(REVIEWS_RELATIVE_PATH)
raise "Missing #{reviews_file_path}".red unless File.exist?(reviews_file_path)
reviews_json = JSON.parse(File.read(reviews_file_path))

kanji_lapse_count_by_character = Hash.new {|h, k| h[k] = 0 }
word_lapse_count_by_word = Hash.new {|h, k| h[k] = 0 }

reviews_json.keys.each do |review_category|
  reviews_json[review_category].each do |card|
    if card["spelling"]
      word_lapse_count_by_word[card["spelling"]] += count_lapses(card["reviews"])
    end

    if card["character"]
      kanji_lapse_count_by_character[card["character"]] += count_lapses(card["reviews"])
    end
  end
end

word_leeches = word_lapse_count_by_word
  .filter { |word, lapse_count| lapse_count > LAPSE_COUNT_THRESHOLD }
  .keys
kanji_leeches = kanji_lapse_count_by_character
  .filter { |kanji, lapse_count| lapse_count > LAPSE_COUNT_THRESHOLD }
  .keys

File.open(WORD_LEECHES_RELATIVE_PATH, "w+") { |f| f.puts(word_leeches.to_json) }
File.open(KANJI_LEECHES_RELATIVE_PATH, "w+") { |f| f.puts(kanji_leeches.to_json) }

# Copy the files into the data directory to be used in the extension
FileUtils.cp(WORD_LEECHES_RELATIVE_PATH, "./data/word_leeches.json")
FileUtils.cp(KANJI_LEECHES_RELATIVE_PATH, "./data/kanji_leeches.json")
